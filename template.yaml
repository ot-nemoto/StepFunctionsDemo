AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  StepFunctionsDemo

  Sample SAM Template for StepFunctionsDemo

Parameters:
  NotificationEmail:
    Type: String

Globals:
  Function:
    Timeout: 3
    VpcConfig:
      SecurityGroupIds:
      - !Ref SecurityGroup
      SubnetIds:
      - !Ref Subnet1
      - !Ref Subnet2

Resources:
  Plus3Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: calculations/
      Handler: plus3.lambda_handler
      Runtime: ruby2.5
      Policies:
      - AWSLambdaBasicExecutionRole
      - Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DeleteNetworkInterface
          Resource: "*"
  Minus3Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: calculations/
      Handler: minus3.lambda_handler
      Runtime: ruby2.5
      Policies:
      - AWSLambdaBasicExecutionRole
      - Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DeleteNetworkInterface
          Resource: "*"
  Multipled3Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: calculations/
      Handler: multipled3.lambda_handler
      Runtime: ruby2.5
      Policies:
      - AWSLambdaBasicExecutionRole
      - Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DeleteNetworkInterface
          Resource: "*"
  Divided3Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: calculations/
      Handler: divided3.lambda_handler
      Runtime: ruby2.5
      Policies:
      - AWSLambdaBasicExecutionRole
      - Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DeleteNetworkInterface
          Resource: "*"

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.38.0.0/16
      Tags:
      - Key: Name
        Value: step-functions-demo-vpc
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.38.0.0/24
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.38.1.0/24
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: serverless-deploy-demo
      GroupDescription: serverless-deploy-demo
      VpcId: !Ref Vpc

  StateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: StepFunctionsDemo
      RoleArn: !GetAtt StepFunctionsServiceRole.Arn
      DefinitionString: !Sub |-
        {
          "Comment": "((((value / 3) - 3) * 3) + 3)",
          "StartAt": "Divided3",
          "States": {
            "Divided3": {
              "Type": "Task",
              "Resource": "${Divided3Function.Arn}",
              "InputPath": "$",
              "OutputPath": "$",
              "Next": "Minus3"
            },
            "Minus3": {
              "Type": "Task",
              "Resource": "${Minus3Function.Arn}",
              "InputPath": "$",
              "OutputPath": "$",
              "Next": "Multipled3"
            },
            "Multipled3": {
              "Type": "Task",
              "Resource": "${Multipled3Function.Arn}",
              "InputPath": "$",
              "OutputPath": "$",
              "Next": "Plus3"
            },
            "Plus3": {
              "Type": "Task",
              "Resource": "${Plus3Function.Arn}",
              "InputPath": "$",
              "OutputPath": "$",
              "Next": "Notify"
            },
            "Notify": {
              "Type": "Task",
              "Resource": "arn:aws:states:::sns:publish",
              "Parameters": {
                "Message": { "value.$" : "$.value" },
                "TopicArn": "${SnsTopic}"
              },
              "End": true
            }
          }
        }

  StepFunctionsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /service-role/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action: 
          - sts:AssumeRole
          Principal:
            Service:
            - states.amazonaws.com
      Policies:
      - PolicyName: StepFunctionsDemoLambdaInvokePolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: 
            - !Sub ${Plus3Function.Arn}
            - !Sub ${Minus3Function.Arn}
            - !Sub ${Multipled3Function.Arn}
            - !Sub ${Divided3Function.Arn}
          - Effect: Allow
            Action:
            - SNS:Publish
            Resource:
            - !Ref SnsTopic

  StepFunctionsAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          version: "1.0"
          title: StepFunctionsAPI
        schemes:
        - https
        paths:
          execution/{value}:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
              x-amazon-apigateway-integration:
                credentials: !GetAtt ApiGatewayStepFunctionsAPIRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:states:action/StartExecution"
                responses:
                  default:
                    statusCode: 200
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: !Sub |
                     {
                       "input": "{\"value\": $input.params('value')}",
                       "stateMachineArn": "${StateMachine}"
                     }
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws
        definitions:
          Empty:
            title: Empty Schema
            type: object
          Error:
            title: Error Schema
            type: object
            properties:
              message:
                type: string

  ApiGatewayStepFunctionsAPIRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Principal:
            Service:
            - apigateway.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess

  SnsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref NotificationEmail
        Protocol: email

Outputs:
  StateMachineArn:
    Value: !Ref StateMachine
  StepFunctionsAPI:
    Value: !Sub "https://${StepFunctionsAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/execution/{value}"
